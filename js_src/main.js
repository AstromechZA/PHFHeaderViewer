// Generated by CoffeeScript 1.8.0
(function() {
  var Main, viewport_height, viewport_width,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  viewport_width = 800;

  viewport_height = 600;

  Main = (function() {
    Main.prototype.margin = 0.05;

    Main.prototype.colours = [0x19ff00, 0x00ff65, 0x0098ff, 0x6500ff, 0xe500ff];

    Main.prototype.last_colour = 0;

    function Main(target) {
      this.render = __bind(this.render, this);
      this.animate = __bind(this.animate, this);
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, viewport_width / viewport_height, 0.1, 1000);
      this.camera.position.z = 5;
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setSize(viewport_width, viewport_height);
      this.controls = new THREE.OrbitControls(this.camera);
      this.controls.damping = 0.2;
      this.controls.addEventListener('change', this.render);
      this.build_scene();
      target.appendChild(this.renderer.domElement);
      this.animate();
      this.render();
    }

    Main.prototype.build_scene = function() {
      this.add_block_with_padding(0, 0, 0, 4, 4, 4, 0);
      this.add_block_with_padding(1, 1, 1, 2, 2, 2, 0.1);
      this.add_block_with_padding(1, 1, -1, 2, 2, 2, 0.1);
      this.add_block_with_padding(1, -1, 1, 2, 2, 2, 0.1);
      this.add_block_with_padding(1, -1, -1, 2, 2, 2, 0.1);
      this.add_block_with_padding(-1, 1, 1, 2, 2, 2, 0.1);
      this.add_block_with_padding(-1, 1, -1, 2, 2, 2, 0.1);
      this.add_block_with_padding(-1, -1, 1, 2, 2, 2, 0.1);
      return this.add_block_with_padding(-1, -1, -1, 2, 2, 2, 0.1);
    };

    Main.prototype.animate = function() {
      requestAnimationFrame(this.animate);
      return this.controls.update();
    };

    Main.prototype.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    Main.prototype.next_colour = function() {
      this.last_colour = (this.last_colour + 1) % this.colours.length;
      return this.colours[this.last_colour];
    };

    Main.prototype.add_block = function(x, y, z, w, h, d) {
      return this.add_block_with_padding(x, y, z, w, h, d, 0);
    };

    Main.prototype.add_block_with_padding = function(x, y, z, w, h, d, p) {
      var g, rcol, side1, side2, tmp;
      tmp = new THREE.BoxGeometry(w - p, h - p, d - p);
      rcol = this.next_colour();
      g = new THREE.Geometry();
      g.vertices.push(tmp.vertices[1]);
      g.vertices.push(tmp.vertices[4]);
      g.vertices.push(tmp.vertices[6]);
      g.vertices.push(tmp.vertices[3]);
      g.vertices.push(tmp.vertices[2]);
      g.vertices.push(tmp.vertices[0]);
      g.vertices.push(tmp.vertices[1]);
      g.vertices.push(tmp.vertices[3]);
      side1 = new THREE.Line(g, new THREE.LineBasicMaterial({
        color: rcol
      }));
      side1.position.x = x;
      side1.position.y = y;
      side1.position.z = z;
      this.scene.add(side1);
      g = new THREE.Geometry();
      g.vertices.push(tmp.vertices[5]);
      g.vertices.push(tmp.vertices[7]);
      g.vertices.push(tmp.vertices[2]);
      g.vertices.push(tmp.vertices[0]);
      g.vertices.push(tmp.vertices[5]);
      g.vertices.push(tmp.vertices[4]);
      g.vertices.push(tmp.vertices[6]);
      g.vertices.push(tmp.vertices[7]);
      side2 = new THREE.Line(g, new THREE.LineBasicMaterial({
        color: rcol
      }));
      side2.position.x = x;
      side2.position.y = y;
      side2.position.z = z;
      return this.scene.add(side2);
    };

    Main.prototype.add_block_by_bounds = function(sx, sy, sz, ex, ey, ez) {
      return this.add_block((sx + ex) / 2, (sy + ey) / 2, (sz + ez) / 2, ex - sx, ey - sy, ez - sz);
    };

    return Main;

  })();

  $(function() {
    var main;
    return main = new Main(document.body);
  });

}).call(this);
